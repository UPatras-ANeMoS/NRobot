TODO
    Finish MAs constructors (add default vector values)
    finalize MA and MAs classes
    fix partitioning for coincident seeds?
    test NRCLip scaling
    Finish in/on functions in NBase
    Consistently comment every function
    Change code style in function declarations-definitions (one argument per line)
    make plotting more user friendly (mouse control?)
	add testing executables (and automated tests?)

Files to rewrite
    src/NRobot/*

Testing
	NBase
    NPlot
    NPart

Improve functions
	double n::diameter( const Polygon& P )
		use convex hull to reduce complexity in non-convex polygons
	double n::area( const Polygon& P )
		How does it handle non-simple polygons? (check clipper)
	n::Point n::centroid( const n::Polygon& P )
		How does it handle non-simple polygons?
	inpolygon
		must be in at least one external and in no internals (check clipper)
	void nr::ys_partitioning()
        return neighbor relationships

--------------------------------------------------------------------------------

Structure
    NRobot (various robot classes and control laws) [NBase, NPart]
    NPart (Partitioning algorithms) [NBase, Clipper]
    NPlot (Visualization and plotting) [NBase, SDL]
    NBase (Basic geometric classes: point, contour, polygon etc.)

Code Guidelines
	Classes
		classes contain ONLY public data members and constructors/destructors
		all other functionality is implemented as non-member functions
	Functions
		Functions that might fail MUST return an int indicating exit status
		Input arguments are either const references or values for PODs
		Output arguments are pointers

Code Style
    Functions
        type function(
            argument1,
            argument2
        ) {
            code
        }
